{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/check-auth": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Check if the current token is valid and not blacklisted",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Validate authentication token",
                "responses": {
                    "200": {
                        "description": "User authentication status",
                        "schema": {
                            "$ref": "#/definitions/handlers.AuthResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or blacklisted token",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/forgot-password": {
            "post": {
                "description": "Send a password reset link to the user's email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Request password reset",
                "parameters": [
                    {
                        "description": "User email",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.ForgotPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password reset email sent",
                        "schema": {
                            "$ref": "#/definitions/handlers.ForgotPasswordResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - User not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/logout": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Logs out a user and invalidates the session token",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User logout",
                "responses": {
                    "200": {
                        "description": "Logged out successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.MessageResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/payment/checkout/one-time": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a Stripe checkout session for one-time payments",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "payment"
                ],
                "summary": "Create a one-time payment checkout session",
                "parameters": [
                    {
                        "description": "One-time checkout details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateOneTimeCheckoutRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Checkout session created",
                        "schema": {
                            "$ref": "#/definitions/handlers.CheckoutResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/payment/checkout/subscription": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a Stripe checkout session for subscription payments",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "payment"
                ],
                "summary": "Create a subscription checkout session",
                "parameters": [
                    {
                        "description": "Checkout session details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateCheckoutSessionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Checkout session created",
                        "schema": {
                            "$ref": "#/definitions/handlers.CheckoutResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/payment/subscription": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns details about the user's current subscription",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "payment"
                ],
                "summary": "Get subscription details",
                "responses": {
                    "200": {
                        "description": "Subscription details",
                        "schema": {
                            "$ref": "#/definitions/handlers.SubscriptionResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/payment/subscription/cancel": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Cancels the user's subscription at the end of the current billing period",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "payment"
                ],
                "summary": "Cancel a subscription",
                "responses": {
                    "200": {
                        "description": "Subscription canceled",
                        "schema": {
                            "$ref": "#/definitions/handlers.CancelSubscriptionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/refresh-token": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Generate a new JWT token using a valid existing token",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refresh authentication token",
                "responses": {
                    "200": {
                        "description": "Token refreshed successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.TokenResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or blacklisted token",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/reports": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all reports belonging to the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reports"
                ],
                "summary": "Get all user reports",
                "responses": {
                    "200": {
                        "description": "List of user reports",
                        "schema": {
                            "$ref": "#/definitions/handlers.ReportsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/reports/sorted": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all reports belonging to the authenticated user, sorted by matching scale",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reports"
                ],
                "summary": "Get user reports sorted by matching scale",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Sort ascending (true) or descending (false, default)",
                        "name": "asc",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of user reports sorted by matching scale",
                        "schema": {
                            "$ref": "#/definitions/handlers.SortedReportsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/reset-password": {
            "post": {
                "description": "Reset the user's password using a valid reset token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Reset user password",
                "parameters": [
                    {
                        "description": "Reset token and new password",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.ResetPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password reset successful",
                        "schema": {
                            "$ref": "#/definitions/handlers.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or expired token",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/signin": {
            "post": {
                "description": "Authenticate a user with email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Authenticate a user",
                "parameters": [
                    {
                        "description": "User Credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.SignInRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User authenticated successfully with token",
                        "schema": {
                            "$ref": "#/definitions/handlers.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/signup": {
            "post": {
                "description": "Register a new user with the provided information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User Registration Information",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.SignUpRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created successfully with token",
                        "schema": {
                            "$ref": "#/definitions/handlers.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/stripe/webhook": {
            "post": {
                "description": "Handles Stripe webhook events for subscription updates, payments, etc.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "webhook"
                ],
                "summary": "Process Stripe webhook events",
                "responses": {
                    "200": {
                        "description": "Webhook processed",
                        "schema": {
                            "$ref": "#/definitions/handlers.WebhookResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/upload": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Uploads a signal file and stores metadata in the database with matching scale",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "files"
                ],
                "summary": "Upload a signal file",
                "parameters": [
                    {
                        "type": "file",
                        "description": "File to upload",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 5,
                        "description": "Matching scale (1-10)",
                        "name": "matchingScale",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "default": "\"\"",
                        "description": "Description of the file",
                        "name": "description",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "File uploaded successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.FileUploadResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - No file uploaded, file too large, or invalid matching scale",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get user details by ID (must be authenticated)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User details",
                        "schema": {
                            "$ref": "#/definitions/handlers.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Trying to access other user's profile",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - User not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/{id}/update": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update user details (must be authenticated and own profile)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update user profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User details to update",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated user details",
                        "schema": {
                            "$ref": "#/definitions/handlers.UserUpdateResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Trying to update other user's profile",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - User not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.AuthResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Login successful"
                },
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                },
                "user": {
                    "$ref": "#/definitions/handlers.UserInfo"
                }
            }
        },
        "handlers.CancelSubscriptionResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Subscription will be canceled at the end of the current billing period"
                },
                "subscription": {
                    "$ref": "#/definitions/handlers.SubscriptionDetails"
                }
            }
        },
        "handlers.CheckoutResponse": {
            "type": "object",
            "properties": {
                "sessionId": {
                    "type": "string",
                    "example": "cs_test_a1b2c3d4e5f6g7h8i9j0"
                },
                "url": {
                    "type": "string",
                    "example": "https://checkout.stripe.com/pay/cs_test_a1b2c3d4e5f6g7h8i9j0"
                }
            }
        },
        "handlers.CreateCheckoutSessionRequest": {
            "type": "object",
            "required": [
                "cancel_url",
                "plan_id",
                "success_url"
            ],
            "properties": {
                "cancel_url": {
                    "type": "string",
                    "example": "https://yourapp.com/cancel"
                },
                "plan_id": {
                    "type": "string",
                    "example": "price_1Oxy3JExamplePriceID"
                },
                "success_url": {
                    "type": "string",
                    "example": "https://yourapp.com/success?session_id={CHECKOUT_SESSION_ID}"
                }
            }
        },
        "handlers.CreateOneTimeCheckoutRequest": {
            "type": "object",
            "required": [
                "amount",
                "cancel_url",
                "currency",
                "product_name",
                "success_url"
            ],
            "properties": {
                "amount": {
                    "description": "Amount in cents, e.g., 2000 = $20.00",
                    "type": "integer",
                    "example": 2000
                },
                "cancel_url": {
                    "type": "string",
                    "example": "https://yourapp.com/cancel"
                },
                "currency": {
                    "type": "string",
                    "example": "usd"
                },
                "product_name": {
                    "type": "string",
                    "example": "Premium Report"
                },
                "success_url": {
                    "type": "string",
                    "example": "https://yourapp.com/success?session_id={CHECKOUT_SESSION_ID}"
                }
            }
        },
        "handlers.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Error message"
                }
            }
        },
        "handlers.FileUploadResponse": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Sample brain activity data"
                },
                "file_id": {
                    "type": "integer",
                    "example": 1
                },
                "matching_scale": {
                    "type": "integer",
                    "example": 7
                },
                "message": {
                    "type": "string",
                    "example": "File processed successfully"
                },
                "report_id": {
                    "type": "integer",
                    "example": 2
                }
            }
        },
        "handlers.ForgotPasswordRequest": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                }
            }
        },
        "handlers.ForgotPasswordResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Password reset instructions sent to your email"
                }
            }
        },
        "handlers.MessageResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Operation completed successfully"
                }
            }
        },
        "handlers.ReportsResponse": {
            "type": "object",
            "properties": {
                "reports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Report"
                    }
                }
            }
        },
        "handlers.ResetPasswordRequest": {
            "type": "object",
            "required": [
                "password",
                "token"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "minLength": 8,
                    "example": "new-password"
                },
                "token": {
                    "type": "string",
                    "example": "reset-token"
                }
            }
        },
        "handlers.SignInRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "password123"
                }
            }
        },
        "handlers.SignUpRequest": {
            "type": "object",
            "required": [
                "date_of_birth",
                "email",
                "name",
                "password"
            ],
            "properties": {
                "address": {
                    "type": "string",
                    "example": "123 Main St"
                },
                "city": {
                    "type": "string",
                    "example": "New York"
                },
                "country": {
                    "type": "string",
                    "example": "US"
                },
                "country_code": {
                    "type": "string",
                    "example": "+1"
                },
                "date_of_birth": {
                    "type": "string",
                    "example": "1990-01-01T00:00:00Z"
                },
                "email": {
                    "type": "string",
                    "example": "john@example.com"
                },
                "mobile": {
                    "type": "string",
                    "example": "5551234567"
                },
                "name": {
                    "type": "string",
                    "example": "John Doe"
                },
                "password": {
                    "type": "string",
                    "minLength": 8,
                    "example": "password123"
                },
                "payment_info": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "{\"card_type\"": "\"visa\"}"
                    }
                },
                "postal_code": {
                    "type": "string",
                    "example": "10001"
                }
            }
        },
        "handlers.SortedReportsResponse": {
            "type": "object",
            "properties": {
                "reports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Report"
                    }
                },
                "sorting": {
                    "$ref": "#/definitions/handlers.SortingInfo"
                }
            }
        },
        "handlers.SortingInfo": {
            "type": "object",
            "properties": {
                "field": {
                    "type": "string",
                    "example": "matching_scale"
                },
                "order": {
                    "type": "string",
                    "example": "descending"
                }
            }
        },
        "handlers.SubscriptionDetails": {
            "type": "object",
            "properties": {
                "cancel_at_period_end": {
                    "type": "boolean",
                    "example": true
                },
                "current_period_end": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "example": "sub_12345"
                },
                "status": {
                    "type": "string",
                    "example": "active"
                }
            }
        },
        "handlers.SubscriptionResponse": {
            "type": "object",
            "properties": {
                "cancel_at_period_end": {
                    "type": "boolean",
                    "example": false
                },
                "current_period_end": {
                    "type": "string"
                },
                "has_subscription": {
                    "type": "boolean",
                    "example": true
                },
                "plan_id": {
                    "type": "string",
                    "example": "price_1Oxy3JExamplePriceID"
                },
                "status": {
                    "type": "string",
                    "example": "active"
                },
                "subscription_id": {
                    "type": "string",
                    "example": "sub_12345"
                }
            }
        },
        "handlers.TokenResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Token refreshed successfully"
                },
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
            }
        },
        "handlers.UpdateUserRequest": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string",
                    "example": "123 Main St"
                },
                "city": {
                    "type": "string",
                    "example": "New York"
                },
                "country": {
                    "type": "string",
                    "example": "US"
                },
                "country_code": {
                    "type": "string",
                    "example": "+1"
                },
                "mobile": {
                    "type": "string",
                    "example": "5551234567"
                },
                "name": {
                    "type": "string",
                    "example": "John Doe"
                },
                "payment_info": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "{\"card_type\"": "\"visa\"}"
                    }
                },
                "postal_code": {
                    "type": "string",
                    "example": "10001"
                }
            }
        },
        "handlers.UserInfo": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john@example.com"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "John Doe"
                }
            }
        },
        "handlers.UserResponse": {
            "type": "object",
            "properties": {
                "user": {
                    "$ref": "#/definitions/models.User"
                }
            }
        },
        "handlers.UserUpdateResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "User updated successfully"
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                }
            }
        },
        "handlers.WebhookResponse": {
            "type": "object",
            "properties": {
                "received": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "models.Report": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string",
                    "example": "{\"key\":\"value\"}"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "matching_scale": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "country_code": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "current_plan_id": {
                    "type": "string"
                },
                "date_of_birth": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "last_login": {
                    "type": "string"
                },
                "mobile": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "payment_info": {
                    "type": "string",
                    "example": "{\"card_type\":\"visa\"}"
                },
                "postal_code": {
                    "type": "string"
                },
                "reports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Report"
                    }
                },
                "stripe_customer_id": {
                    "description": "Stripe fields",
                    "type": "string"
                },
                "stripe_default_payment_method": {
                    "type": "string"
                },
                "subscription_ends_at": {
                    "type": "string"
                },
                "subscription_id": {
                    "type": "string"
                },
                "subscription_status": {
                    "type": "string"
                }
            }
        }
    }
}